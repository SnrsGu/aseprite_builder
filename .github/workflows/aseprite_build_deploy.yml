name: Build and deploy Aseprite

on:
  schedule:
    - cron: '0 0 * * *'
  push:
    branches:
      - master

env:
  BUILD_TYPE: Release
  
jobs:
  check-version:
    name: Check latest Aseprite release
    runs-on: ubuntu-latest
    outputs:
      download_url: ${{ steps.version_info.outputs.download_url }}
      latest_tag: ${{ steps.version_info.outputs.latest_tag }}
      should_build: ${{ steps.should_build.outputs.should_build }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
    - name: Get latest version info
      id: version_info
      run: |
        data=$(curl -sL https://api.github.com/repos/aseprite/aseprite/releases/latest)
        LATEST_TAG=$(echo "${data}" | jq -r '.tag_name')
        DOWNLOAD_URL=$(echo "${data}" | jq -r '.assets[0].browser_download_url')
        VERSION_INFO=$(echo "${data}" | jq -r '.body')
        echo "latest_tag=${LATEST_TAG}" >> $GITHUB_OUTPUT
        echo "download_url=${DOWNLOAD_URL}" >> $GITHUB_OUTPUT
        echo "version_info<<EOF" >> $GITHUB_OUTPUT
        echo "$VERSION_INFO" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Load version from cache
      id: version_check
      uses: actions/cache@v3
      with:
        path: latest_tag.txt
        key: ${{ steps.version_info.outputs.latest_tag }}
    - name: Should we start new build?
      id: should_build
      run: echo "should_build=${{ steps.version_check.outputs.cache-hit != 'true' }}" >> $GITHUB_OUTPUT
    - name: Create Release
      id: create_release
      if: steps.should_build.outputs.should_build == 'true'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version_info.outputs.latest_tag }}
        release_name: Release Aseprite ${{ steps.version_info.outputs.latest_tag }}
        body: |
          ${{ steps.version_info.outputs.version_info }}
        draft: false
        prerelease: false
  
  build-aseprite:
    name: Build Aseprite
    needs: check-version
    if: ${{ needs.check-version.outputs.should_build }}
    runs-on: ${{ matrix.os }}
    strategy:
       matrix:
         os: [windows-latest, ubuntu-latest, macOS-latest]
       fail-fast: false    
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          if [[ "${{ matrix.os }}" == 'ubuntu-latest' ]]; then
            sudo apt-get update
            sudo apt-get install -y cmake ninja-build libxcursor-dev libxi-dev libgl1-mesa-dev
          elif [[ "${{ matrix.os }}" == 'macos-latest' ]]; then
            brew install cmake ninja
          elif [[ "${{ matrix.os }}" == 'windows-latest' ]]; then
            choco install cmake ninja vcredist-all -y
          fi

      - name: Download Skia
        run: |
          curl -o Skia-${{ matrix.os }}.zip -L https://github.com/aseprite/skia/releases/download/m102-861e4743af/Skia-${{ runner.os }}-Release-x64.zip
          unzip Skia-${{ matrix.os }}.zip -d skia

      - name: Run CMake
        working-directory: aseprite/build
        run: |
          cmake -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DLAF_BACKEND=skia -DSKIA_DIR=../../skia -DSKIA_LIBRARY_DIR=../../skia/out/Release-x64 -G Ninja ..
        if: matrix.os == 'windows-latest'
      
      - name: (Windows) Set up MSVC environment
        if: matrix.os == 'windows-latest'
        run: call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\Tools\VsDevCmd.bat" -arch=x64

      - name: Build with Ninja
        working-directory: aseprite/build
        run: ninja aseprite

      - name: Package Aseprite
        working-directory: aseprite/build/bin
        run: |
          zip -r Aseprite-${{ needs.check-version.outputs.latest_tag }}-${{ matrix.os }}.zip *

      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.check-version.outputs.upload_url }}
          asset_path: aseprite/build/bin/Aseprite-${{ needs.check-version.outputs.latest_tag }}-${{ matrix.os }}.zip
          asset_name: Aseprite-${{ needs.check-version.outputs.latest_tag }}-${{ matrix.os }}.zip
          asset_content_type: application/zip
